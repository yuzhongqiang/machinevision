/*
* jpeg.h
*
*/

#ifndef _JPEG_H_
#define _JPEG_H_

/*
表2：段类型
---------------------------------------
名称  标记码  说明
---------------------------------------
SOI    D8     文件头
EOI    D9     文件尾
SOF0   C0     帧开始（标准 JPEG）	
SOF1   C1     同上
DHT    C4     定义 Huffman 表（霍夫曼表）
SOS    DA     扫描行开始
DQT    DB     定义量化表
DRI    DD     定义重新开始间隔
APP0   E0     定义交换格式和图像识别信息
COM    FE     注释
-----------------------------------------------------------
　　说明：有的文章也将DNL段（标记码＝DC，定义扫描行数）列为必须段

*/
typedef enum {			/* JPEG marker codes */
  M_SOF0  = 0xc0,         /* Start Of Frame */
  M_SOF1  = 0xc1,  /* Start Of Frame */
 
  M_JPG   = 0xc8,
  M_SOF9  = 0xc9,
  M_SOF10 = 0xca,
  M_SOF11 = 0xcb,
  
  M_SOF13 = 0xcd,
  M_SOF14 = 0xce,
  M_SOF15 = 0xcf,
  
  M_DHT   = 0xc4,
  
  M_DAC   = 0xcc,
  
  M_RST0  = 0xd0,
  M_RST1  = 0xd1,
  
  M_SOI   = 0xd8,    /* Start Of Image */
  M_EOI   = 0xd9,    /* End Of Image */
  M_SOS   = 0xda,   /* Start Of Scan */
  M_DQT   = 0xdb,
  M_DNL   = 0xdc,
  M_DRI   = 0xdd,
  M_DHP   = 0xde,
  M_EXP   = 0xdf,
  
  M_APP0  = 0xe0,
  M_APP1  = 0xe1,
  
  M_JPG0  = 0xf0,
  M_JPG13 = 0xfd,
  M_COM   = 0xfe,
  
  M_TEM   = 0x01,
  
  M_ERROR = 0x100
} JPEG_MARKER;

/*
1.段的一般结构如下表所示：

表1：段的一般结构
-----------------------------------------------------------------
名称    字节数 数据  说明
-----------------------------------------------------------------
段标识   1     FF    每个新段的开始标识
段类型   1           类型编码（称作“标记码”）
段长度   2           包括段内容和段长度本身,不包括段标识和段类型
段内容               ≤65533字节
-----------------------------------------------------------------
　　说明：
①JPG 文件中所有关于宽度高度长度间隔这一类数据，凡是＞１字节的，均采用Motorola格式，即：高位在前，低位在后。
②有些段没有长度描述也没有内容，只有段标识和段类型。文件头和文件尾均属于这种段。
③段与段之间无论有多少FF都是合法的，这些FF称为“填充字节”，必须被忽略掉。


*/
typedef struct seg_header_t {
	u8 flag;    // must be 0xFF
	u8 id;      // segment ID
}seg_header_t;

/*
表3：SOI（文件头）
-----------------
名称  字节数   值
-----------------
段标识   1     FF
段类型   1     D8 
-----------------
　　说明：这两个字节构成了JPEG文件头
*/
typedef struct seg_soi_t {
	seg_header_t hdr;	// 0xFF 0xD8
}seg_soi_t;



/*
表4：APP0（图像识别信息）
--------------------------------------------------------------------------
名称       字节数 值          说明
--------------------------------------------------------------------------
段标识        1   FF
段类型        1   E0
段长度        2   0010        如果有RGB缩略图就＝16＋3n
　　（以下为段内容）
交换格式      5   4A46494600  “JFIF”的ASCII码
主版本号      1
次版本号      1  
密度单位      1               0＝无单位；1＝点数/英寸；2＝点数/厘米
X像素密度     2               水平方向的密度   
Y像素密度     2               垂直方向的密度
缩略图X像素   1               缩略图水平像素数目  
缩略图Y像素   1               缩略图垂直像素数目
（如果“缩略图X像素”和“缩略图Y像素”的值均＞0，那么才有下面的数据）
RGB缩略图    3×n             n＝缩略图像素总数＝缩略图X像素×缩略图Y像素
--------------------------------------------------------------------------
　　说明：
①JFIF是JPEG File Interchange Format的缩写，即JPEG文件交换格式，另外还有TIFF等格式，很少用
②“如果有RGB缩略图就＝16＋3n”是什么意思呢？比如说“缩略图X像素”和“
     缩略图Y像素”的值均为48，就表示有一个48×48像素的缩略图（ｎ＝48×48），
     缩略图是24位真彩位图，用３个字节来表示一个像素，所以共占用3n个字节。
     但大多数JPG文件都没有这个“鸡肋”缩略图。

*/
typedef struct seg_app0_t {
	seg_header_t hdr;  // 0xFF 0xE0
	u16 length;        // length include this "length" field + content
					   //0x10 or 16+3n
	char jfif[5];        //"JFIF\0"
	u8  major;
	u8  minor;
	u16 xdensity;
	u16 ydensity;
	u8  preview[0];  // preview image data
}seg_app0_t;

/*
表5：COM（注释）
--------------------------------------------------------------------------
名称    字节数   值    说明
--------------------------------------------------------------------------
段标识    1      FF
段类型    1      FE
段长度    2            其值＝注释字符的字节数＋2
段内容                 注释字符
--------------------------------------------------------------------------
　　说明：有的JPEG文件没有这个段

*/

/* some jpeg file don't have this segment */
typedef struct seg_com_t {
	seg_header_t hdr;  // 0xFF 0xFE
	u16 length;        // sizeof(comment) + 2
	char comment[0];
}seg_com_t;


/*
表6：DQT（定义量化表）

--------------------------------------------------------------------------
名称    字节数   值    说明
--------------------------------------------------------------------------
段标识    1      FF
段类型    1      DB
段长度    2      43    其值＝3＋n（当只有一个QT时）
　　（以下为段内容）
QT信息    1            0－3位：QT号
                       4－7位：QT精度（0＝8bit，1字节；否则＝16bit，2字节）
QT        n            n＝64×QT精度的字节数
--------------------------------------------------------------------------
　　说明：
①JPEG文件一般有２个DQT段，为Y值（亮度）定义１个, 为C值（色度）定义１个。 
②一个DQT段可以包含多个QT, 每个都有自己的信息字节

*/
typedef struct seg_dqt_t {
	seg_header_t hdr;   //0xFF 0xDB
	u16 length;   // 2 + 1 + n  (n=64*QTBytes)
	u8 info;   // bit0-bit3: ID;  bit4-bit7 -0: 8bits, others 16bits
	u8 data[0];  // 64*QTBytes
}seg_dqt_t;

/*
表7：SOF0（图像基本信息）
--------------------------------------------------------------------------
名称  字节数   值    说明
--------------------------------------------------------------------------
段标识   1     FF
段类型   1     C0
段长度   2           其值＝8＋组件数量×3
　　（以下为段内容）
样本精度  1    8     每个样本位数（大多数软件不支持12和16）
图片高度  2
图片宽度  2
组件数量  1    3     1＝灰度图，3＝YCbCr/YIQ 彩色图，4＝CMYK 彩色图
　　（以下每个组件占用３字节）
组件 ID   1          1＝Y, 2＝Cb, 3＝Cr, 4＝I, 5＝Q
采样系数  1          0－3位：垂直采样系数
                     4－7位：水平采样系数
量化表号  1
---------------------------------------------------------------------------
　　说明：
①JPEG大都采用yCrCb色彩模型（y表示亮度，Cr红色分量，Cb表示蓝色分量），
     所以组件数量一般＝3
②样本就是单个像素的颜色分量，也可理解为一个样本就是一个组件
③采样系数是实际采样方式与最高采样系数之比，而最高采样系数一般＝0.5
   （分数表示为1/2）。比如说，垂直采样系数＝2，那么2×0.5＝1，表示实际采样
     方式是每个点采一个样，也就是逐点采样；如果垂直采样系数＝1，那么：
     1×0.5＝0.5（分数表示为1/2），表示每２个点采一个样
*/

typedef struct seg_sof0_t {
	seg_header_t hdr;        // FF C0
	u16 length;              // 8 + component_count * 3
	u8 pricise;    // 8  (12 and 16 not support by most software)
	u16 height;
	u16 width;
	u8 count;  // component count: 1-gray bitmap; 3-YCbCr/YIQ; 4-CMYK
	u8 id;    // component id: 1=Y; 2-Cb; 3-Cr; 4-I; 5-Q
	u8 sample_ratio;  // bit0-bit3: vertical; bit4-bit7: horizontal
	u8 table_no;
}seg_sof0_t;

/*
表8：DHT（定义Huffman表）
--------------------------------------------------------------------------
名称    字节数   值    说明
--------------------------------------------------------------------------
段标识    1      FF
段类型    1      C4
段长度    2            其值＝19＋n（当只有一个HT表时）
　　（以下为段内容）
HT信息    1            0－3位：HT号
                       4位：   HT类型, 0＝DC表，1＝AC表
　　　　　　　　　　　 5－7位：必须＝0
HT位表    16           这16个数的和应该≤256
HT值表    n            n＝表头16个数的和
--------------------------------------------------------------------------
　　说明：
①JPEG文件里有２类Haffman 表：一类用于DC（直流量），
     一类用于AC（交流量）。一般有４个表：亮度的DC和AC，
     色度的DC和AC。最多可有６个。
②一个DHT 段可以包含多个HT表, 每个都有自己的信息字节
③HT表是一个按递增次序代码长度排列的符号表
*/
typedef struct seg_dht_t {
	seg_header_t hdr;   // 0xFF 0xC4
	u16 length;  // 19 + n
	u8 info;   // bit0-bit3:  table ID; bit4: 0-DC table, 1-AC table; bit5-bit7: must equal to 0
	u8 bit_table[16];    //sum of the 16 byte should be n (n<= 256)
	u8 value_table[0];   //n
}seg_dht_t;

/*
表9：DRI（定义重新开始间隔）
--------------------------------------------------------------------------
名称    字节数   值    说明
--------------------------------------------------------------------------
段标识    1      FF
段类型    1      DD
段长度    2      4 
　　（以下为段内容）
开始间隔  2      n   　复位标记的间隔距离
---------------------------------------------------------------------------
　　说明：
①开始间隔表示在压缩数据流中，每隔ｎ个MCU 块就有一个RST标记，
     RST标记将Huffman 的解码数据流复位，DC也重新从０开始，因此，
     RST标记是一种复位标记
②RST 标记是一种特殊的段，它只具有段标识和段类型（长度＝２字节），
     但它不是独立的段，只能穿插在数据流中（文件头和文件尾段也只有
     段标识和段类型，却都是独立的段）。
③RST标记共有８个（RST0－RST7），从RST0起开始使用，然后是RST1....直至RST7，
     再从RST0重复。
④RST标记的标识码是 FFD0－FFD7，对应 RST0－RST7
⑤笔者查看了许多自己电脑上的JPG文件的数据，未发现DRI段和RST标记，
     所以无法进行详尽的考察
*/
typedef struct seg_dri_t {
	seg_header_t hdr;  // 0xFF 0xDD
	u16 length;   // 4
	u16 interval;  // n
}seg_dri_t;


/*
表10：SOS（扫描行开始）
--------------------------------------------------------------------------
名称          字节数   值    说明
--------------------------------------------------------------------------
段标识           1     FF
段类型           1     DA
段长度           2     000C  其值＝6＋2×扫描行内组件数量
　　（以下为段内容）
扫描行内组件数量 1     3     必须≥1，≤4（否则错误），通常＝3
　　（以下每个组件占用２字节）
组件ID           1           1 = Y, 2 = Cb, 3 = Cr, 4 = I, 5 = Q
Huffman表号      1           0－3位：AC表号 (其值＝0...3)
                             4－7位：DC表号(其值＝0...3)

                 3           最后３个字节用途不明，忽略
--------------------------------------------------------------------------
　　说明：紧接SOS段后的是压缩的图像数据（一个个扫描行），数据存放顺序是从左到右、从上到下。

*/
typedef struct seg_sos_t {
	seg_header_t hdr;   // 0xFF 0xDA
	u16 length;    // 6+2*component_count
	u8 comp_count;  //  1 <= comp_count <= 4
	u8 comp_id;    // 1-Y; 2-Cb; 3-Cr; 4-I; 5-Q
	u8 table_id;   //bit0-bit3: AC table ID; bit4-bit7: DC table ID;
}seg_sos_t;


/*
表11：EOI（文件尾）
------------------
名称  字节数   值
------------------
段标识   1     FF
段类型   1     D9 
------------------
　　说明：这两个字节构成了JPEG文件尾
*/
typedef struct seg_eoi_t {
	seg_header_t hdr;   // 0xFF 0xD9
}seg_eoi_t;




#endif   //_JPEG_H_
